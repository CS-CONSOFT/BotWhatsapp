// Carrega vari√°veis de ambiente do arquivo .env (apenas em ambiente local)
if (!process.env.DOCKER_ENV) {
    try {
        require('dotenv').config();
    } catch (err) {
        console.log('dotenv n√£o encontrado, usando vari√°veis de ambiente do sistema');
    }
}

// Utilit√°rio de email
const { emailConfig, enviarEmail } = require('./emailUtil');

// Classe para gerenciar configura√ß√£o e notifica√ß√µes por usu√°rio
class BotHandler {
    constructor() {
        this.configState = new Map(); // chave: userId, valor: { modoConfig: bool }
        this.emailPorUsuario = new Map(); // chave: userId, valor: email
    }

    getUserId(message) {
        return message.author || message.from;
    }

    isConfigMode(userId) {
        const state = this.configState.get(userId);
        return typeof state === 'object' && state.modoConfig;
    }

    setConfigMode(userId, value) {
        this.configState.set(userId, { modoConfig: value });
    }

    getEmail(userId) {
        // Sempre retorna o email padr√£o, mas permite configura√ß√£o personalizada se existir
        return this.emailPorUsuario.get(userId) || 'samal@cs-consoft.com.br';
    }

    setEmail(userId, email) {
        this.emailPorUsuario.set(userId, email);
    }

    async handleConfig(message, chat, userId) {
        const texto = message.body.trim();
        const state = this.configState.get(userId);
        if (texto === '1') {
            this.setConfigMode(userId, 'aguardandoEmail');
            await chat.sendMessage('Digite o novo email para receber notifica√ß√µes:');
            return true;
        }
        if (texto === '2') {
            this.setConfigMode(userId, false);
            await chat.sendMessage('Saindo do modo de configura√ß√£o. Bot voltando ao modo normal.');
            return true;
        }
        if (state.modoConfig === 'aguardandoEmail') {
            if (/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(texto)) {
                this.setEmail(userId, texto);
                this.setConfigMode(userId, false);
                await chat.sendMessage(`Email atualizado para: ${texto}\nSaindo do modo de configura√ß√£o.`);
            } else {
                await chat.sendMessage('Email inv√°lido. Tente novamente ou envie 2 para sair.');
            }
            return true;
        }
        await chat.sendMessage('Op√ß√£o inv√°lida.\n1 - Definir email\n2 - Sair');
        return true;
    }

    async startConfig(message, chat, userId) {
        this.setConfigMode(userId, true);
        const emailPersonalizado = this.emailPorUsuario.get(userId);
        const emailAtual = this.getEmail(userId);
        const isDefault = !emailPersonalizado;
        const status = isDefault ? '(padr√£o do sistema)' : '(personalizado)';
        await chat.sendMessage(`Email atual: ${emailAtual} ${status}\nEscolha uma op√ß√£o:\n1 - Definir email personalizado\n2 - Sair`);
    }

    async handleMedia(message, chat, userId) {
        let tipo = message.type === 'image' ? 'IMAGEM' : 'PDF';
        console.log(`[${chat.name || chat.id.user}] ${message.author || message.from}: Enviou uma ${tipo}.`);
        
        // Captura o texto/legenda da mensagem
        const textoMensagem = message.body ? message.body.trim() : '';
        console.log(`[DEBUG] Texto da mensagem: "${textoMensagem}"`);
        
        const emailDestino = this.getEmail(userId); // Usa a fun√ß√£o getEmail que j√° tem o email padr√£o
        console.log(`[DEBUG] Processando ${tipo} para envio para: ${emailDestino}`);
        
        try {
            // Baixa o arquivo da mensagem
            console.log(`[DEBUG] Tentando baixar m√≠dia...`);
            const media = await message.downloadMedia();
            if (!media) {
                console.log(`[ERRO] N√£o foi poss√≠vel baixar m√≠dia`);
                await chat.sendMessage('N√£o foi poss√≠vel baixar o arquivo para enviar por email.');
                return;
            }
            console.log(`[DEBUG] M√≠dia baixada com sucesso. MimeType: ${media.mimetype}`);
            
            // Prepara o anexo
            const attachment = {
                filename: tipo === 'IMAGEM' ? 'imagem.jpg' : 'documento.pdf',
                content: Buffer.from(media.data, 'base64'),
                contentType: media.mimetype
            };
            
            // Define o t√≠tulo do email baseado no texto da mensagem
            let tituloEmail;
            let corpoEmail;
            
            if (textoMensagem) {
                tituloEmail = textoMensagem;
                corpoEmail = `Voc√™ recebeu uma ${tipo} de ${message.author || message.from} no chat ${chat.name || chat.id.user}.\n\nTexto da mensagem: ${textoMensagem}`;
            } else {
                tituloEmail = `Nova mensagem (${tipo}) no chat ${chat.name || chat.id.user}`;
                corpoEmail = `Voc√™ recebeu uma ${tipo} de ${message.author || message.from} no chat ${chat.name || chat.id.user}.`;
            }
            
            console.log(`[DEBUG] T√≠tulo do email: "${tituloEmail}"`);
            console.log(`[DEBUG] Enviando email para: ${emailDestino}`);
            
            await enviarEmail(
                emailDestino,
                tituloEmail,
                corpoEmail,
                attachment
            );
            console.log(`[DEBUG] Email enviado com sucesso!`);
            
            const isDefault = !this.emailPorUsuario.get(userId);
            const status = isDefault ? ' (email padr√£o)' : ' (email personalizado)';
            const mensagemConfirmacao = textoMensagem 
                ? `‚úÖ ${tipo} enviada para: ${emailDestino}${status}\nüìß T√≠tulo: "${textoMensagem}"`
                : `‚úÖ ${tipo} enviada para: ${emailDestino}${status}`;
            
            await chat.sendMessage(mensagemConfirmacao);
        } catch (e) {
            console.error(`[ERRO] Erro ao processar m√≠dia:`, e);
            await chat.sendMessage(`Erro ao enviar email: ${e.message}`);
        }
    }

    async handleDocument(message, chat) {
        await chat.sendMessage(`[${chat.name || chat.id.user}] ${message.author || message.from}: Enviou um DOCUMENTO (${message._data.mimetype}).`);
    }

    async handleInstrucao(chat) {
        await chat.sendMessage('ü§ñ *Bot WhatsApp Ativo*\n\nüìß *Email padr√£o configurado:* samal@cs-consoft.com.br\n\nüìã *Como usar:*\n‚Ä¢ Envie uma *imagem* ou *PDF* para receber por email\n‚Ä¢ Adicione um *texto junto com a imagem* para usar como t√≠tulo do email\n‚Ä¢ Digite *#CONFIG* para configurar email personalizado\n\n‚úÖ Pronto para receber seus arquivos!');
    }
}

const botHandler = new BotHandler();

// Importa as classes necess√°rias do whatsapp-web.js e libs para QR Code
const { Client, NoAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const { log } = require('console');
const path = require('path');
const fs = require('fs');



// Detecta se est√° rodando no Docker
function isRunningInDocker() {
    try {
        return fs.existsSync('/.dockerenv') || 
               fs.readFileSync('/proc/1/cgroup', 'utf8').includes('docker') ||
               process.env.DOCKER_ENV === 'true';
    } catch (err) {
        return false;
    }
}

const IS_DOCKER = isRunningInDocker();
console.log(`Executando em: ${IS_DOCKER ? 'Docker' : 'Local'}`);

// Configura√ß√µes baseadas no ambiente (apenas Puppeteer, sem authDataPath)
const getConfig = () => {
    if (IS_DOCKER) {
        return {
            puppeteerConfig: {
                executablePath: '/usr/bin/chromium-browser',
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--single-process',
                    '--disable-gpu'
                ]
            }
        };
    } else {
        // Configura√ß√£o para Windows/Local
        const isWindows = process.platform === 'win32';
        return {
            puppeteerConfig: {
                headless: 'new', // Usa o novo modo headless
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--disable-extensions',
                    '--disable-plugins',
                    '--disable-background-timer-throttling',
                    '--disable-backgrounding-occluded-windows',
                    '--disable-renderer-backgrounding',
                    '--disable-features=TranslateUI',
                    '--disable-ipc-flooding-protection',
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor',
                    ...(isWindows ? ['--disable-gpu', '--disable-software-rasterizer'] : [])
                ]
            }
        };
    }
};

const config = getConfig();

// Fun√ß√£o removida - com NoAuth n√£o precisamos limpar sess√£o

// Com NoAuth, n√£o precisamos limpar sess√£o pois ela nunca √© salva
console.log('üö´ Modo sem sess√£o ativado - sempre ser√° necess√°rio escanear QR code');

let ultimoQR = null; // Armazena o √∫ltimo QR gerado
let qrMostrado = false; // Controla se o QR j√° foi exibido
let qrGerado = false; // Nova vari√°vel para controlar se j√° foi gerado

// Nome exato do grupo que ser√° monitorado
const NOME_GRUPO = "GRUPO_X"; // Altere para o nome real do seu grupo

// Fun√ß√£o para criar o cliente com tratamento de erro
function createClient() {
    try {
        // Usa NoAuth para sempre for√ßar novo QR Code - sem salvar sess√£o
        const client = new Client({
            authStrategy: new NoAuth(),
            puppeteer: config.puppeteerConfig
        });

        // Tratamento abrangente de erros do cliente
        client.on('auth_failure', msg => {
            console.error('‚ùå Falha na autentica√ß√£o:', msg);
            console.log('üîß Poss√≠veis solu√ß√µes:');
            console.log('   1. Apague a pasta .wwebjs_auth e escaneie um novo QR Code');
            console.log('   2. Verifique se o WhatsApp Web est√° funcionando no navegador');
            console.log('   3. Tente usar um telefone diferente para escanear');
            
            // Limpar estado para permitir nova tentativa
            qrGerado = false;
            qrMostrado = false;
            ultimoQR = null;
        });

        client.on('disconnected', (reason) => {
            console.log('‚ùå Cliente desconectado:', reason);
            console.log('üîÑ Resetando estado do QR Code...');
            qrGerado = false;
            qrMostrado = false;
            ultimoQR = null;
            
            // Diferentes a√ß√µes baseadas no motivo da desconex√£o
            if (reason === 'LOGOUT') {
                console.log('üëã Logout detectado - usu√°rio deslogou do WhatsApp');
            } else if (reason === 'NAVIGATION') {
                console.log('üß≠ Desconex√£o por navega√ß√£o - tentativa de reconex√£o autom√°tica');
            } else if (reason === 'CONFLICT') {
                console.log('‚öîÔ∏è  Conflito detectado - WhatsApp Web aberto em outro local');
            } else {
                console.log('üîç Motivo da desconex√£o:', reason);
            }
            
            console.log('‚ö†Ô∏è  Bot desconectado! Reinicie o bot para gerar um novo QR Code.');
        });

        client.on('change_state', state => {
            console.log('üîÑ Estado do cliente alterado:', state);
        });

        client.on('change_battery', (batteryInfo) => {
            console.log('üîã Informa√ß√µes da bateria:', batteryInfo);
        });

        // Tratamento de erros gerais do cliente
        client.on('error', (error) => {
            console.error('‚ùå Erro no cliente WhatsApp:', error.message);
            
            // Categorizar erros para melhor tratamento
            if (error.message.includes('Protocol error')) {
                console.log('üîá Erro de protocolo - geralmente pode ser ignorado');
            } else if (error.message.includes('Session closed')) {
                console.log('üì± Sess√£o fechada - necess√°rio novo QR Code');
                qrGerado = false;
                qrMostrado = false;
                ultimoQR = null;
            } else if (error.message.includes('EBUSY')) {
                console.log('üîí Recurso ocupado - tentando recupera√ß√£o autom√°tica...');
            } else {
                console.error('üîç Stack trace:', error.stack);
            }
        });

        return client;
    } catch (error) {
        console.error('Erro ao criar cliente:', error);
        throw error;
    }
}

// Cria o cliente do WhatsApp
console.log('üöÄ Criando cliente WhatsApp...');
const client = createClient();
console.log('‚úÖ Cliente WhatsApp criado com sucesso!');
console.log('‚è≥ Aguardando autentica√ß√£o ou QR Code...');

// Tratamento de erros n√£o capturados com categoriza√ß√£o
process.on('unhandledRejection', (reason, promise) => {
    const errorMsg = reason?.message || reason;
    
    // Erros espec√≠ficos que podemos ignorar com seguran√ßa
    const ignorePatterns = [
        'Protocol error (Network.setUserAgentOverride): Session closed',
        'Protocol error (Runtime.callFunctionOn): Session closed',
        'Protocol error (Page.navigate): Session closed',
        'Target closed',
        'Session closed'
    ];
    
    const shouldIgnore = ignorePatterns.some(pattern => 
        String(errorMsg).includes(pattern)
    );
    
    if (shouldIgnore) {
        console.log('üîá Erro de protocolo ignorado:', errorMsg);
        return;
    }
    
    // Erros cr√≠ticos que requerem aten√ß√£o
    const criticalPatterns = [
        'EBUSY',
        'ENOENT',
        'Permission denied',
        'Cannot read properties'
    ];
    
    const isCritical = criticalPatterns.some(pattern => 
        String(errorMsg).includes(pattern)
    );
    
    if (isCritical) {
        console.error('‚ùå ERRO CR√çTICO (Unhandled Rejection):', errorMsg);
        console.error('üìç Promise:', promise);
        console.error('üîç Stack:', reason?.stack);
    } else {
        console.log('‚ö†Ô∏è  Unhandled Rejection (n√£o cr√≠tico):', errorMsg);
    }
});

process.on('uncaughtException', (error) => {
    const errorMsg = error?.message || error;
    
    // Erros espec√≠ficos que podemos ignorar
    const ignorePatterns = [
        'Protocol error',
        'Session closed',
        'Target closed'
    ];
    
    const shouldIgnore = ignorePatterns.some(pattern => 
        String(errorMsg).includes(pattern)
    );
    
    if (shouldIgnore) {
        console.log('üîá Exce√ß√£o de protocolo ignorada:', errorMsg);
        return;
    }
    
    console.error('‚ùå EXCE√á√ÉO N√ÉO CAPTURADA:', errorMsg);
    console.error('üîç Stack:', error?.stack);
    
    // Em ambiente Docker, reiniciar pode ser mais seguro
    if (IS_DOCKER) {
        console.error('üê≥ Executando em Docker - considerando reinicializa√ß√£o...');
        // N√£o finalizar imediatamente, permitir que o container seja reiniciado externamente
        setTimeout(() => {
            console.error('üíÄ Finalizando processo ap√≥s erro cr√≠tico...');
            process.exit(1);
        }, 5000);
    } else {
        console.log('üíª Executando localmente - continuando execu√ß√£o...');
    }
});

// Evento disparado quando o QR Code deve ser exibido no terminal
client.on('qr', qr => {
    console.log("üîÑ Novo QR Code recebido!");
    
    qrGerado = true;
    qrMostrado = true;
    ultimoQR = qr;
    
    // Gera o QR no terminal
    qrcode.generate(qr, {small: true});
    console.log("üì± QR Code gerado! Escaneie com o WhatsApp (Aparelhos conectados).");
    console.log("‚è∞ O QR Code expira em alguns minutos, se n√£o funcionar, reinicie o bot.");
});



// Evento disparado quando o bot est√° pronto para uso
client.on('ready', async () => {
    qrMostrado = false;
    qrGerado = false; // Reset para permitir novo QR se deslogar
    ultimoQR = null; // Limpa o QR quando conectado
    
    console.log('üöÄ Bot est√° online e pronto para receber mensagens!');
    console.log('üìß Email padr√£o configurado: samal@cs-consoft.com.br');
    console.log('üîß Para configurar email personalizado, envie: #CONFIG');
    
    try {
        const clientInfo = client.info;
        console.log(`üì± Conectado como: ${clientInfo.pushname} (${clientInfo.wid.user})`);
    } catch (error) {
        console.log('‚ö†Ô∏è  N√£o foi poss√≠vel obter informa√ß√µes do cliente, mas bot est√° funcional');
    }
});

// Evento disparado para cada mensagem recebida
client.on('message', async message => {
    try {
        const chat = await message.getChat();
        console.log(`[DEBUG] Mensagem recebida - Tipo: ${chat.isGroup ? 'GRUPO' : 'PRIVADO'}`);
        console.log(`[DEBUG] De: ${message.from}`);
        console.log(`[DEBUG] Conte√∫do: ${message.body}`);
        console.log(`[DEBUG] Tipo da mensagem: ${message.type}`);
        
        if (chat.isGroup) {
            console.log(`[DEBUG] Nome do grupo: ${chat.name}`);
            // Se NOME_GRUPO estiver configurado como "GRUPO_X", isso significa que voc√™ deve alterar
            // para o nome real do seu grupo. Por enquanto, vou permitir processar TODOS os grupos
            // ou configurar para processar apenas o grupo espec√≠fico
            if (NOME_GRUPO !== "GRUPO_X" && chat.name !== NOME_GRUPO) {
                console.log(`[DEBUG] Ignorando grupo "${chat.name}" - apenas processando "${NOME_GRUPO}"`);
                return;
            }
            console.log(`[DEBUG] Processando mensagem do grupo: ${chat.name}`);
        }
        
        console.log(`[DEBUG] Processando mensagem privada...`);
        const userId = botHandler.getUserId(message);

    // Checagem de modo de configura√ß√£o
    if (botHandler.isConfigMode(userId)) {
        await botHandler.handleConfig(message, chat, userId);
        return;
    }

    // Ativa√ß√£o do modo de configura√ß√£o
    if (message.body.trim().toUpperCase() === '#CONFIG') {
        await botHandler.startConfig(message, chat, userId);
        return;
    }

    // Checagem de m√≠dia
    if (message.type === 'image' || (message.type === 'document' && message._data && message._data.mimetype === 'application/pdf')) {
        await botHandler.handleMedia(message, chat, userId);
        return;
    }

    // Outros documentos
    if (message.type === 'document') {
        await botHandler.handleDocument(message, chat);
        return;
    }

    // Qualquer outra mensagem
    await botHandler.handleInstrucao(chat);
    
    } catch (error) {
        console.error(`[ERRO] Erro ao processar mensagem de ${message.from}:`, error);
        console.error(`[ERRO] Stack trace:`, error.stack);
        
        try {
            const chat = await message.getChat();
            await chat.sendMessage('‚ùå Ocorreu um erro interno. Tente novamente em alguns segundos.');
        } catch (chatError) {
            console.error(`[ERRO] N√£o foi poss√≠vel enviar mensagem de erro:`, chatError);
        }
    }
});

console.log('üîß Inicializando cliente WhatsApp...');
console.log('ÔøΩ Modo sem sess√£o: SEMPRE ser√° necess√°rio escanear um novo QR Code.');
console.log('‚ôªÔ∏è  Isso garante que o bot conecte do zero a cada reinicializa√ß√£o.');
client.initialize();