name: SP804_Publish_BOT_WHATSAPP

on:
  workflow_dispatch:


run-name: SP804_Publish_BOT_WHATSAPP

env:
  DOCKER_REPOSITORY: valtergabrielbs13304/csconsoft

jobs:
  gerando_imagem:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout do reposit√≥rio principal
      uses: actions/checkout@v4
      with:
        repository: CS-CONSOFT/BotWhatsapp
        token: ${{ secrets.ACCESS_TOKEN_GITHUB }}

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: valtergabrielbs13304
        password: dckr_pat_kvTDR1XrfY9SxSgCrJ485csC4Tk

    - name: Recupera Data Atual
      id: date
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
        format: "YYYY.MM"

    - name: Gera imagem e container
      id: build-image
      env:
        IMAGE_TAG: bot_whatsapp_${{ steps.date.outputs.time }}_005
      run: |
        echo "IMAGEM COMPLETA: ${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG"
        docker build -t ${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG .
        docker push ${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG

  gerando-container-c1:
    needs: gerando_imagem
    runs-on: ubuntu-latest
    steps:
    - name: Recupera Data Atual
      id: date
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
        format: "YYYY.MM"

    - name: Gera containers 1
      id: gera-container
      timeout-minutes: 30
      env:
        IMAGE_TAG: bot_whatsapp_${{ steps.date.outputs.time }}_005
      run: |
        sshpass -p "${{ secrets.CS_SENHA_SERVIDOR_OPEN }}" ssh -o StrictHostKeyChecking=no \
            -o ServerAliveInterval=30 \
            -o ServerAliveCountMax=60 \
            -o ConnectTimeout=300 \
            -p ${{ secrets.CS_PORTA_SERVIDOR_OPEN }} ${{ secrets.CS_USER_SERVIDOR_OPEN }}@${{ vars.CS_IP_SERVIDOR_OPEN }} << 'EOF'

        echo "üîê Fazendo login no Docker Hub: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "dckr_pat_kvTDR1XrfY9SxSgCrJ485csC4Tk" | sudo docker login --username "valtergabrielbs13304" --password-stdin

        echo "üì• Baixando nova imagem do Docker Hub: $(date '+%Y-%m-%d %H:%M:%S')"
        timeout 1800 sudo docker pull ${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG &
        PULL_PID=$!

        while kill -0 $PULL_PID 2>/dev/null; do
            echo "‚è≥ Download em progresso... $(date '+%H:%M:%S') - Aguardando conclus√£o"
            sleep 30
        done

        wait $PULL_PID
        PULL_EXIT_CODE=$?

        if [ $PULL_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Download conclu√≠do com sucesso: $(date '+%Y-%m-%d %H:%M:%S')"
            
            echo "üõë Parando container antigo graciosamente: $(date '+%Y-%m-%d %H:%M:%S')"
            if sudo docker ps -q --filter "name=bot_whatsapp_ctn_005" | grep -q .; then
                echo "üì¶ Container encontrado, enviando sinal SIGTERM..."
                sudo docker stop --time=30 bot_whatsapp_ctn_005 || true
                sleep 10
                
                # Verificar se ainda est√° executando e for√ßar parada
                if sudo docker ps -q --filter "name=bot_whatsapp_ctn_005" | grep -q .; then
                    echo "üíÄ For√ßando parada do container..."
                    sudo docker kill bot_whatsapp_ctn_005 || true
                    sleep 5
                fi
            else
                echo "‚ÑπÔ∏è  Nenhum container antigo encontrado"
            fi
            
            echo "üóëÔ∏è  Removendo container antigo: $(date '+%Y-%m-%d %H:%M:%S')"
            sudo docker rm -f bot_whatsapp_ctn_005 || true
            
            echo "üîç Verificando containers usando a porta 3005..."
            for ctn in $(sudo docker ps -q --filter "publish=3005"); do
                echo "üõë Removendo container na porta 3005: $ctn"
                sudo docker rm -f $ctn || true
            done
            
            echo "üîå Verificando processos usando a porta 3005..."
            if sudo lsof -i :3005 2>/dev/null; then
                echo "üíÄ Finalizando processos na porta 3005..."
                sudo kill -9 $(sudo lsof -t -i :3005) 2>/dev/null || true
                sleep 3
            fi
            
            echo "üßπ Limpando volumes √≥rf√£os: $(date '+%Y-%m-%d %H:%M:%S')"
            sudo docker volume prune -f || true
            
            echo "üìÅ Preparando diret√≥rio de sess√£o: $(date '+%Y-%m-%d %H:%M:%S')"
            # Remover diret√≥rio antigo se existir
            if [ -d "./.wwebjs_auth" ]; then
                echo "üóëÔ∏è  Removendo diret√≥rio de sess√£o antigo..."
                
                # M√©todo mais agressivo para lidar com EBUSY
                sudo fuser -k ./.wwebjs_auth 2>/dev/null || true
                sleep 2
                
                # Tentar v√°rias abordagens para remo√ß√£o
                if ! sudo rm -rf ./.wwebjs_auth 2>/dev/null; then
                    echo "‚ö†Ô∏è  Remo√ß√£o direta falhou, tentando m√©todo alternativo..."
                    BACKUP_NAME=".wwebjs_auth_old_$(date +%s)"
                    sudo mv ./.wwebjs_auth "./$BACKUP_NAME" 2>/dev/null || true
                    # Limpar backup em background
                    (sleep 60 && sudo rm -rf "./$BACKUP_NAME" 2>/dev/null &) &
                fi
            fi
            
            # Criar novo diret√≥rio com permiss√µes corretas
            mkdir -p ./.wwebjs_auth
            sudo chown -R 1000:1000 ./.wwebjs_auth
            chmod -R 755 ./.wwebjs_auth
            
            echo "üöÄ Iniciando novo container: $(date '+%Y-%m-%d %H:%M:%S')"
            sudo docker run -d \
              --name bot_whatsapp_ctn_005 \
              --restart unless-stopped \
              -p 3005:3000 \
              --cap-add=SYS_ADMIN \
              --security-opt seccomp=unconfined \
              --shm-size=2g \
              -v $(pwd)/.wwebjs_auth:/app/.wwebjs_auth \
              --env PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
              --env PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser \
              --env TZ=America/Sao_Paulo \
              ${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG

            echo "‚è≥ Aguardando container estabilizar: $(date '+%Y-%m-%d %H:%M:%S')"
            sleep 15
            
            echo "üîç Verificando status do container..."
            if sudo docker ps --filter "name=bot_whatsapp_ctn_005" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -q "bot_whatsapp_ctn_005"; then
                echo "‚úÖ Container iniciado com sucesso!"
                sudo docker logs --tail=20 bot_whatsapp_ctn_005 || true
            else
                echo "‚ùå Falha ao iniciar container!"
                sudo docker logs bot_whatsapp_ctn_005 || true
                exit 1
            fi

            echo "üßπ Limpando imagens antigas: $(date '+%Y-%m-%d %H:%M:%S')"
            sudo docker image prune -f || true
            
        else
            echo "‚ùå Falha no download da imagem: $(date '+%Y-%m-%d %H:%M:%S')"
            exit 1
        fi
        EOF
        echo "üèÅ Deploy no servidor 1 conclu√≠do: $(date '+%Y-%m-%d %H:%M:%S')"
      continue-on-error: false

  gerando-container-c2:
    needs: gerando_imagem
    runs-on: ubuntu-latest
    steps:
    - name: Recupera Data Atual
      id: date
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
        format: "YYYY.MM"

    - name: Gera containers 2
      id: gera-container
      timeout-minutes: 30
      env:
        IMAGE_TAG: bot_whatsapp_${{ steps.date.outputs.time }}_005
      run: |
        sshpass -p "${{ secrets.CS_SENHA_SERVIDOR_OPEN }}" ssh -o StrictHostKeyChecking=no \
            -o ServerAliveInterval=30 \
            -o ServerAliveCountMax=60 \
            -o ConnectTimeout=300 \
            -p ${{ vars.CS_PORTA_SERVIDOR_DOCKER03 }} ${{ secrets.CS_USER_SERVIDOR_OPEN }}@${{ vars.CS_IP_SERVIDOR_OPEN }} << 'EOF'

        echo "üîê Fazendo login no Docker Hub: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "dckr_pat_kvTDR1XrfY9SxSgCrJ485csC4Tk" | sudo docker login --username "valtergabrielbs13304" --password-stdin

        echo "üì• Baixando nova imagem do Docker Hub: $(date '+%Y-%m-%d %H:%M:%S')"
        timeout 1800 sudo docker pull ${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG &
        PULL_PID=$!

        while kill -0 $PULL_PID 2>/dev/null; do
            echo "‚è≥ Download em progresso... $(date '+%H:%M:%S') - Aguardando conclus√£o"
            sleep 30
        done

        wait $PULL_PID
        PULL_EXIT_CODE=$?

        if [ $PULL_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Download conclu√≠do com sucesso: $(date '+%Y-%m-%d %H:%M:%S')"
            
            echo "üõë Parando container antigo graciosamente: $(date '+%Y-%m-%d %H:%M:%S')"
            if sudo docker ps -q --filter "name=bot_whatsapp_ctn_005" | grep -q .; then
                echo "üì¶ Container encontrado, enviando sinal SIGTERM..."
                sudo docker stop --time=30 bot_whatsapp_ctn_005 || true
                sleep 10
                
                # Verificar se ainda est√° executando e for√ßar parada
                if sudo docker ps -q --filter "name=bot_whatsapp_ctn_005" | grep -q .; then
                    echo "üíÄ For√ßando parada do container..."
                    sudo docker kill bot_whatsapp_ctn_005 || true
                    sleep 5
                fi
            else
                echo "‚ÑπÔ∏è  Nenhum container antigo encontrado"
            fi
            
            echo "üóëÔ∏è  Removendo container antigo: $(date '+%Y-%m-%d %H:%M:%S')"
            sudo docker rm -f bot_whatsapp_ctn_005 || true
            
            echo "üîç Verificando containers usando a porta 3005..."
            for ctn in $(sudo docker ps -q --filter "publish=3005"); do
                echo "üõë Removendo container na porta 3005: $ctn"
                sudo docker rm -f $ctn || true
            done
            
            echo "üîå Verificando processos usando a porta 3005..."
            if sudo lsof -i :3005 2>/dev/null; then
                echo "üíÄ Finalizando processos na porta 3005..."
                sudo kill -9 $(sudo lsof -t -i :3005) 2>/dev/null || true
                sleep 3
            fi
            
            echo "üßπ Limpando volumes √≥rf√£os: $(date '+%Y-%m-%d %H:%M:%S')"
            sudo docker volume prune -f || true
            
            echo "üìÅ Preparando diret√≥rio de sess√£o: $(date '+%Y-%m-%d %H:%M:%S')"
            # Remover diret√≥rio antigo se existir
            if [ -d "./.wwebjs_auth" ]; then
                echo "üóëÔ∏è  Removendo diret√≥rio de sess√£o antigo..."
                
                # M√©todo mais agressivo para lidar com EBUSY
                sudo fuser -k ./.wwebjs_auth 2>/dev/null || true
                sleep 2
                
                # Tentar v√°rias abordagens para remo√ß√£o
                if ! sudo rm -rf ./.wwebjs_auth 2>/dev/null; then
                    echo "‚ö†Ô∏è  Remo√ß√£o direta falhou, tentando m√©todo alternativo..."
                    BACKUP_NAME=".wwebjs_auth_old_$(date +%s)"
                    sudo mv ./.wwebjs_auth "./$BACKUP_NAME" 2>/dev/null || true
                    # Limpar backup em background
                    (sleep 60 && sudo rm -rf "./$BACKUP_NAME" 2>/dev/null &) &
                fi
            fi
            
            # Criar novo diret√≥rio com permiss√µes corretas
            mkdir -p ./.wwebjs_auth
            sudo chown -R 1000:1000 ./.wwebjs_auth
            chmod -R 755 ./.wwebjs_auth
            
            echo "üöÄ Iniciando novo container: $(date '+%Y-%m-%d %H:%M:%S')"
            sudo docker run -d \
              --name bot_whatsapp_ctn_005 \
              --restart unless-stopped \
              -p 3005:3000 \
              --cap-add=SYS_ADMIN \
              --security-opt seccomp=unconfined \
              --shm-size=2g \
              -v $(pwd)/.wwebjs_auth:/app/.wwebjs_auth \
              --env PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
              --env PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser \
              --env TZ=America/Sao_Paulo \
              ${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG

            echo "‚è≥ Aguardando container estabilizar: $(date '+%Y-%m-%d %H:%M:%S')"
            sleep 15
            
            echo "üîç Verificando status do container..."
            if sudo docker ps --filter "name=bot_whatsapp_ctn_005" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -q "bot_whatsapp_ctn_005"; then
                echo "‚úÖ Container iniciado com sucesso!"
                sudo docker logs --tail=20 bot_whatsapp_ctn_005 || true
            else
                echo "‚ùå Falha ao iniciar container!"
                sudo docker logs bot_whatsapp_ctn_005 || true
                exit 1
            fi

            echo "üßπ Limpando imagens antigas: $(date '+%Y-%m-%d %H:%M:%S')"
            sudo docker image prune -f || true
            
        else
            echo "‚ùå Falha ao baixar a imagem do Docker Hub: $(date '+%Y-%m-%d %H:%M:%S')"
            exit 1
        fi
        EOF
        echo "üèÅ Deploy no servidor 2 conclu√≠do: $(date '+%Y-%m-%d %H:%M:%S')"
      continue-on-error: false
